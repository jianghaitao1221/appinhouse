#!/usr/bin/env groovy

def getHost() {
    def remote = [:]
    remote.name = 'appinhouse'
    remote.host = 'test.server'
    remote.allowAnyHosts = true
    remote.user = 'jenkins-cli'
    return remote
}

remote = getHost()


def copyConf() {
    sshPut remote: remote, from: env.WORKSPACE + '/deploy/redis.conf', into: '/srv/appinhouse/redis/conf'
    sshPut remote: remote, from: env.WORKSPACE + '/conf/app.conf', into:'/srv/appinhouse/conf'
}

def setConf(String secretKey) {
    sshPut remote: remote, from: env.WORKSPACE + '/deploy/set-appinhouse-conf.sh', into:'/tmp'
    sshCommand remote: remote, command: "bash /tmp/set-appinhouse-conf.sh " + secretKey
}

def run() {
    def restart_appinhouse = """cd /srv/appinhouse \
    && docker-compose down \
    && docker-compose pull \
    && docker-compose up -d
    """
    sshCommand remote: SSH_REMOTE, command: restart_appinhouse
}

def deployBySSH(String secretKey) {
    copyConf()
    setConf(secretKey)
    run(appinhouseImageTag)
}

pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(
            daysToKeepStr: '15',
            artifactNumToKeepStr: '20'
        ))
        ansiColor('xterm')
    }
    environment {
        APPINHOUSE_HOME = '/srv/appinhouse'
        DOCKER_COMPOSE_FILE = "${env.APPINHOUSE_HOME}/docker-compose.yml"
        APPINHOUSE_CONFIG_PATH = "${env.APPINHOUSE_HOME}/conf"
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    //    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins.ssh', keyFileVariable: 'identity')]) {
                    //        remote.identityFile = identity
                    withCredentials([usernamePassword(credentialsId: 'jenkins.ssh', usernameVariable: 'username', passwordVariable: 'password')]) {
                        remote.password = password
                        withCredentials([string(credentialsId: 'appinhouse-secret-key', variable: 'secretKey')]) {
                            deployBySSH(secretKey)
                        }            
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                           
                }
            }
        }
    }
}
